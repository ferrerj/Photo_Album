package cs213.photoAlbum.control;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import cs213.photoAlbum.model.*;

/**
 * @author John Ferrer
 *
 */
public class Controller {
	// current objects being manipulated
	private Backend backend=new Backend();
	private Backend other = new Backend();
	public User currentUser;
	/**
	 * Creates new user, sets it as current
	 * @param username name desired for user
	 * @param fullname user's full name
	 * @return true, false whether successful Creating user
	 * @throws ClassNotFoundException 
	 * @throws IOException 
	 */
	public Controller() throws ClassNotFoundException, IOException
	{
		backend=backend.readUser();
	}
	public boolean create_user(String username, String fullname) throws IOException{
		
		String[] name = fullname.split("\"");
		if(backend.addUser(username, name[0]))
		{
			backend.writeUser(backend); // alittle wonky but should be okay
			return true;
		}
		
		return false;
	}
		
	
	public String getName(String username)
	{
		User user;
		if((user = backend.getUser(username))!=null)
		{
			return user.getName();
		}
		return null;
	}
	/**
	 * Deletes current user
	 * @param id User name of the user to be deleted.
	 * @return whether successful deleting user
	 * @throws IOException 
	 */
	public boolean delete_user(String id) throws IOException{
	
		String[] usrid=id.split("\"");
		if(backend.deleteUser(usrid[0]))
		{
			backend.writeUser(backend);
			return true;
		}
		return false;
	}
	
	public String[] list_users()
	{
		return backend.listUsers();
	}
	
	/**
	 * @param username username to attempt to log in as
	 * @return true, false depending on success of log in
	 */
	// no password requested in test runs
	public boolean login(String username){
		try {
			backend = other.readUser();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			backend = new Backend();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			backend = new Backend();
		}
		if(backend.getUser(username)!=null){  //maybe redundant?
			currentUser =  backend.getUser(username);
			return true;
		}
		return false;
	}
	/**
	 * Logs out current user
	 * @return true, false depending on successful logout
	 * @throws IOException 
	 */
	public void logout() throws IOException{
		other.writeUser(backend);
	}
	public User getUser(String username)
	{
		return backend.getUser(username);
	}
	
	public Albums getAlbum(String album)
	{
		return currentUser.getAlbum(album);
	}
	
	public void addAlbum(String album)
	{
		if(currentUser.addAlbum(album)==false)
		{
			System.out.println("album exists for user "+currentUser+":\n"+album);
		}
		else
		{
			System.out.println("created for user "+currentUser.getName()+":\n"+album);
		}
	}
	
	public String[] listAlbums()
	{
		return currentUser.listAlbums();
	}
	
	public void deleteAlbum(String album)
	{
		if(currentUser.deleteAlbum(album)==false)
		{
			System.out.println("album"+album+"does not exist");
		}
		else
		{
			System.out.println("removed for user "+currentUser.getName()+":\n"+album);
		}
	}
	
	public String[] listPhotos(String album)
	{
		return currentUser.getAlbum(album).list_photos();
	}
	public void addPhoto(String name, String caption,String album)
	{
		Albums current_album = currentUser.getAlbum(album);
		Photos photo = new Photos(name,caption);
		if(current_album==null)
		{
			System.out.println("album does not exist");
		}
		else
		{
			if(current_album.add_photo(photo))
			{
				System.out.println("added photo"+name);
			}
			else
			{
				System.err.println("photo "+name+" already exists");
			}
		}
		
	}
	
	public void deletePhoto(String album,String name)
	{
		Albums current_album = currentUser.getAlbum(album);
		if(current_album==null)
		{
			System.out.println("album does not exist");
		}
		else
		{
			if(current_album.delete_photo(name))
			{
				System.out.println("Photo "+name+ " deleted");
			}
			else
			{
				System.out.println("Photo "+name+" does not exist");
			}
		}
	}
	public void movePhoto(String name,String source,String dest )
	{
		Albums source_album = currentUser.getAlbum(source);
		Albums dest_album = currentUser.getAlbum(dest);
		Photos photo;
		if(source_album==null)
		{
			System.out.println("Album "+source+" does not exist");
			return;
		}
		if(dest_album ==null)
		{
			System.out.println("Album "+dest+" does not exist");
			return;
		}
		
		photo=source_album.getPhoto(name);
		if(photo!=null)
		{
			
			if(dest_album.add_photo(photo))
			{
				System.out.println("photo"+name+"successfully moved");
				source_album.delete_photo(name);
			}
			else
			{
			System.out.println("Error photo exists in that album");
			}
		}
		
	}
	public String getOldest(String album_name)
	{
		Albums album = currentUser.getAlbum(album_name);
		return album.getOldest();
	}
	public Photos getPhoto(String album_name,String photo_name)
	{
		return currentUser.getAlbum(album_name).getPhoto(photo_name);
	}
	
	public String[] getTags(String album_name,String photo_name)
	{
		Photos photo = getPhoto(album_name,photo_name);
		return photo.listTags();
	}
	
	public void addTag(String album_name,String photo_name,String tag_type,String tag_value)
	{
		Photos photo = getPhoto(album_name,photo_name);
		photo.addTag(tag_type, tag_value);
	}
	
	public void addPhoto(String album_name,Photos photo)
	{
		Albums album = currentUser.getAlbum(album_name);
		album.add_photo(photo);
	}
	
	public void deleteTag(String album_name,String photo_name,String tag_name)
	{
		
	}
	/**
	 * Gets album with name...
	 * @param name name of album to search for
	 * @return the album being searched for, or null if non existant
	 */
//	public Albums getAlbum(String name){
//		return currentUser.albums.get(name);
//	}
//	/**
//	 * Gets the current album listed in the user
//	 * @return current album stored in user object
//	 */
//	public Albums getCurrentAlbum(){
//		return currentUser.currentAlbum;
//	}
//	/**
//	 * gets a photo from the current album listed in the user object
//	 * @param name name of photo to search for
//	 * @return the photo with the desired name
//	 */
//	public Photos getPhotoFromCurrentAlbum(String name){
//		return getCurrentAlbum().photo_list.get(name);
//	}
//	/**
//	 * gets the current photo stored in the current album object
//	 * @return the current photo
//	 */
//	public Photos getCurrentPhoto(){
//		return getCurrentAlbum().currentPhoto;
//	}
//	/**
//	 * gets all photos with the searched for tag
//	 * @param type type of tag
//	 * @param name data stored in tag
//	 */
//	public void getAllPhotosWithTag(String type, String name){
//		Albums[] allAlbums = (Albums[]) currentUser.albums.navigableKeySet().toArray();
//		for(int i = 0; i<allAlbums.length; i++){
//			Photos[] allphotos = (Photos[]) allAlbums[i].photo_list.navigableKeySet().toArray();
//			openAlbum(allAlbums[i].toString());
//			for(int j=0; j<allphotos.length; j++){
//				if(allphotos[j].tag_list.get(type.concat(name))!=null){
//					System.out.println(allphotos[j].getCaption()+" - Album: "+getCurrentAlbum()+" - Date: "+allphotos[j].formatDate()); 
//				} else {
//					Tags[] allTags = (Tags[]) allphotos[j].tag_list.navigableKeySet().toArray();
//					Boolean hasValue = false;
//					for(int k = 0; k<allTags.length; k++){
//						if(allTags[k].tag_value.equals(name)){
//							hasValue = true;
//						}
//					}
//					if(hasValue){
//						System.out.println(allphotos[j].getCaption()+" - Album: "+getCurrentAlbum()+" - Date: "+allphotos[j].formatDate());
//					}
//				}
//			}
//		}
//	}
//	/**
//	 * @param start starting part of range
//	 * @param end ending part
//	 * @return a sorted arraylist of albums within the date range
//	 */
//	public Photos[] getOrganizedPhotos(String albumName){
//		if(getAlbum(albumName)!=null){
//			return (Photos[]) getAlbum(albumName).photo_list.values().toArray();
//		}
//		return null;
//	}
//	/**
//	 * gets photos from current album
//	 * @return returns an array of photos
//	 */
//	public Photos[] getOrganizedPhotos(){
//		return (Photos[]) getCurrentAlbum().photo_list.values().toArray();
//	}
//	/**
//	 * returns the tags from a photo within an album
//	 * @param albumName album the photo is in
//	 * @param photoName photo with tags
//	 * @return array of tags on the album
//	 */
//	public Tags[] getOrganizedTags(String albumName, String photoName){
//		if(getAlbum(albumName)!=null){
//			if(getAlbum(albumName).photo_list.get(photoName)!=null){
//				return (Tags[]) getAlbum(albumName).photo_list.get(photoName).tag_list.values().toArray();
//			}
//		}
//		return null;
//	}
//	/**
//	 * gets tags from current photo stored in current album
//	 * @return array of tags on the above described photo
//	 */
//	public Tags[] getOrganizedTags(){
//		return (Tags[]) getCurrentPhoto().tag_list.values().toArray();
//	}
//	/**
//	 * moves a photo between albums
//	 * @param file filename of the photo
//	 * @param oldAlbum the album the photo is coming from
//	 * @param newAlbum the album the photo is going to
//	 * @return true, false depending on success
//	 */
//	public boolean movePhoto(String file, String oldAlbum, String newAlbum){
//			Albums oldOne = getAlbum(oldAlbum);
//		if(oldOne.photo_list.get(file)!=null){
//			Albums newOne = getAlbum(newAlbum);
//			newOne.add_photo(oldOne.photo_list.get(file));
//			oldOne.delete_photo(file);
//			return true;
//		}
//		return false;
//	}
//	/**
//	 * lists users stored in backend
//	 * @return an array of users from backend
//	 */
//	public User[] listUsers(){
//		return (User[]) backend.listUsers().values().toArray();
//	}
//	/**
//	 * Sets an album as the current album
//	 * @param allAlbums album to be opened
//	 * @return success of opening album
//	 */
//	public boolean openAlbum(String allAlbums){
//		Albums currentAlbum = getAlbum(allAlbums);
//		if(currentAlbum!=null){
//			currentUser.currentAlbum = currentAlbum;
//			return true;
//		}
//		return false;
//	}
//	/**
//	 * sets current album as null, thereby closing it
//	 * @return success of the attempt
//	 */
//	public boolean closeAlbum(){
//		if(closePhoto()){
//			currentUser.currentAlbum = null;
//			return currentUser.currentAlbum==null;
//		}
//		return false;
//	}
//	/**
//	 * sets photo as currently open photo
//	 * @param name name of the photo to set as current photo
//	 * @return success of the event
//	 */
//	public boolean openPhoto(String name){
//		Photos currentPhoto = getCurrentAlbum().photo_list.get(name);
//		if(currentPhoto!=null){
//			currentUser.currentAlbum.currentPhoto = currentPhoto;
//			return true;
//		}
//		return false;
//	}
//	/**
//	 * sets current photo as null
//	 * @return success of event
//	 */
//	public boolean closePhoto(){
//		currentUser.currentAlbum.currentPhoto=null;
//		return currentUser.currentAlbum.currentPhoto==null;
//	}
	public void editTag(String album, String photo_name, String text,
			String secondText) {
		// TODO Auto-generated method stub
		
	}
}